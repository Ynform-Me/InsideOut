(ns insideout.user
  "A default `user.clj` that starts an `nrepl` server (and interactive REPL) and
  enables namepace auto-reload.

  Normally this is where you would put utilities you will access interactively
  from the REPL."
  {:on-pre-reload 'pre-reload
   :on-post-reload 'post-reload}
  (:require [clojure.pprint     :refer [pprint]]
            [insideout.nrepl    :as nrepl-server]
            [insideout.repl-y   :as repl-y]
            [insideout.dynamo   :as dynamo]
            [insideout.reload   :as reload]))

;; We can dynamically load and require libraries from Maven repositories...
(defonce ultra-repl
  (dynamo/require-libs '[[venantius/ultra "0.6.0"]
                         [aprint "0.1.3"]]
                       '[[ultra.repl :as fancy]
                         [aprint.core :refer [aprint]]]))


(defn pre-reload
  "When the namespace is about to be reloaded you might want to save state, close database connections,
  tear down parts of the UI, etc.  Use a namespace `pre-reload` function for this purpose."
  []
  (println "Called just before this namespace will be reloaded; registered in the above `ns` form."))

(defn post-reload
  "When the namespace has just been reloaded you might want to restore state, reopen database connections,
  refresh parts of the UI, etc.  Use a namespace `post-reload` function for this purpose."
  []
  (println "Called just after this namespace has been reloaded; registered in the above `ns` form."))


(defn -main [& args]
  (println "Starting auto namespace reloader...")
  (reload/reload-classpath-dirs)

  (println "Starting network REPL server.  You can connect to this from your IDE or editor...")
  (let [nrepl (nrepl-server/start! :cider)
        port  (:port nrepl)]

    (fancy/configure-repl! {} true)

    (println "Launching interactive REPL...")
    (repl-y/start!
     {:eval  `(in-ns *ns*)
      :attach (str "localhost:" port)
      :color  true})))
